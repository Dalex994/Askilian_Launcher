how to download the files which are in difference between two folders, with one on the web, delete the files that are not in the web folder,and download it in the identics subfolders than those from the webfolder, in wpf c#



using System.IO;
using System.Net.Http;
using System.Threading.Tasks;

using System.IO;
using System.Net;

...

public void UpdateLocalFolder(string localFolder, string remoteFolderUrl)
{
    // Step 1: Get a list of files in the local folder
    var localFiles = Directory.GetFiles(localFolder, "*", SearchOption.AllDirectories);

    // Step 2: Send an HTTP GET request to retrieve a list of files from the remote server folder
    var request = (HttpWebRequest)WebRequest.Create(remoteFolderUrl);
    request.Method = WebRequestMethods.Http.Get;
    request.Accept = "*/*";
    request.Headers.Add(HttpRequestHeader.AcceptEncoding, "gzip, deflate, br");
    request.Headers.Add(HttpRequestHeader.CacheControl, "max-age=0");
    request.AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate | DecompressionMethods.Brotli;
    using (var response = (HttpWebResponse)request.GetResponse())
    using (var stream = response.GetResponseStream())
    using (var reader = new StreamReader(stream))
    {
        var remoteFiles = reader.ReadToEnd().Split(Environment.NewLine, StringSplitOptions.RemoveEmptyEntries);

        // Step 3: Compare the list of files in the local and remote folders to identify the files that are missing from the local folder
        var missingFiles = remoteFiles.Select(f => new Uri(remoteFolderUrl + "/" + f))
                                      .Except(localFiles.Select(f => new Uri(f)))
                                      .ToList();

        // Step 4: Download the missing files to the local folder, using the same subfolders as on the web
        using (var webClient = new WebClient())
        {
            foreach (var missingFileUrl in missingFiles)
            {
                var missingFilePath = Path.Combine(localFolder, missingFileUrl.LocalPath.TrimStart('/'));
                if (!Directory.Exists(Path.GetDirectoryName(missingFilePath)))
                    Directory.CreateDirectory(Path.GetDirectoryName(missingFilePath));
                webClient.DownloadFile(missingFileUrl, missingFilePath);
            }
        }

// Step 5: Delete any files in the local subfolder that are not present in the remote subfolder
        foreach (var localFile in localFiles)
        {
            var localFileName = Path.GetFileName(localFile);
            if (!remoteFiles.Contains(remoteSubfolderUrl + "/" + localFileName))
            {
                File.Delete(localFile);
            }
        }
    }
}


 private void InstallGameFiles(bool _isUpdate, Version _onlineversion)
        {
            try
            {
                WebClient webClient = new WebClient();
                if (_isUpdate)
                {
                    Status = LauncherStatus.downloadingUpdate;
                }

                

            }
            catch (Exception ex)
            {
                Status = LauncherStatus.failed;
                // Debug
                MessageBox.Show($"Error installing game files: {ex}");
            }
        }

        private void DownloadGAmeCompletedCallback(object sender, AsyncCompletedEventArgs e)
        {
            try
            {
                
                Status = LauncherStatus.ready;
            }
            catch (Exception ex)
            {
                Status = LauncherStatus.failed;
                // Debug
                MessageBox.Show($"Error finishing download: {ex}");
            }
        }

        private void InstanceCall(object sender, EventArgs e)
        {
            if (File.Exists("Here the name of the file") && Status == LauncherStatus.ready)
            {
                ProcessStartInfo startInfo = new ProcessStartInfo();
                startInfo.WorkingDirectory = Path.Combine(rootPath, "Build");
                Process.Start(startInfo);

                Close();
            }
            else if (Status == LauncherStatus.failed) 
            { 
                CheckForUpdates();
            }
        }