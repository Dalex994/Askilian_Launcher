private string installationFolder = "";

// Function to decompress a given zip file
private void DecompressZip(string zipFilePath, string extractPath)
{
    ZipFile.ExtractToDirectory(zipFilePath, extractPath);
}

// Function to install the update files in the selected installation folder
private void InstallFiles()
{
    var exeFilePath = Path.Combine(installationFolder, "update.exe");
    var zipFilePath = Path.Combine(installationFolder, "update.zip");

    // Decompress the zip file to the installation folder
    DecompressZip(zipFilePath, installationFolder);

    // Run the exe file to install the update
    Process.Start(exeFilePath);
}

// Event handler for the "Select Installation Folder" button
private void SelectInstallationFolderButton_Click(object sender, RoutedEventArgs e)
{
    var folderDialog = new System.Windows.Forms.FolderBrowserDialog();
    var result = folderDialog.ShowDialog();

    if (result == System.Windows.Forms.DialogResult.OK)
    {
        installationFolder = folderDialog.SelectedPath;
        InstallationFolderTextBox.Text = installationFolder;
    }
}

// Event handler for the "Download Update" button
private async void DownloadUpdateButton_Click(object sender, RoutedEventArgs e)
{
    var updateMessages = new StringBuilder();

    // Set up some variables to hold the file names and Web links
    var zipFileName = "update.zip";
    var exeFileName = "update.exe";
    var zipWebLink = "[insert web link for update.zip here]";
    var exeWebLink = "[insert web link for update.exe here]";

    // Check if the installation folder has been selected
    if (string.IsNullOrEmpty(installationFolder))
    {
        updateMessages.AppendLine("Please select an installation folder.");
    }

    // Check if the files already exist in the installation folder
    var zipAlreadyExists = File.Exists(Path.Combine(installationFolder, zipFileName));
    var exeAlreadyExists = File.Exists(Path.Combine(installationFolder, exeFileName));

    // If both files already exist, compare their contents to those on the Web
if (zipAlreadyExists && exeAlreadyExists)
{
    var zipAreSame = CompareFiles(Path.Combine(installationFolder, zipFileName), zipWebLink);
    var exeAreSame = CompareFiles(Path.Combine(installationFolder, exeFileName), exeWebLink);

    if (zipAreSame && exeAreSame)
    {
        updateMessages.AppendLine("Files are already up to date.");
    }
    else
    {
        InstallFiles();
        updateMessages.AppendLine("Update installed successfully.");
    }
}
else
{
    // Download the files from the Web
    await DownloadFile(zipWebLink, installationFolder, zipFileName);
    await DownloadFile(exeWebLink, installationFolder, exeFileName);
    InstallFiles();
    updateMessages.AppendLine("Update installed successfully.");
}

UpdateStatusTextBlock.Text = updateMessages.ToString();